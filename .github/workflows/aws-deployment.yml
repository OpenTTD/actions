name: AWS Deployment

on:
  workflow_call:
    inputs:
      is_staging:
        description: Whether this deployment is on staging or production
        required: true
        type: boolean
      name:
        description: Name of the AWS Stack
        required: true
        type: string
      url_production:
        description: URL where the production deployment can be visited
        required: true
        type: string
      url_staging:
        description: URL where the staging deployment can be visited
        required: true
        type: string
      digest:
        description: Docker image digest of the image to deploy (sha256:...)
        required: true
        type: string
      version:
        description: Version of the image
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        description: Your AWS access key
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: Your AWS secret key
        required: true
      AWS_REGION:
        description: The AWS region we are deploying in
        required: true

jobs:
  deploy:
    name: ${{ inputs.is_staging && 'Staging' || 'Production' }}
    runs-on: ubuntu-latest

    concurrency: deployment
    environment:
      name: ${{ inputs.is_staging && 'Staging' || 'Production' }}
      url: ${{ inputs.url_staging }}

    steps:
    - name: Deploy to AWS
      run: |
        STACK="Live-${{ inputs.is_staging && 'Staging' || 'Production' }}-${{ inputs.name }}"
        PARAMETER="/Live/Version/${{ inputs.is_staging && 'Staging' || 'Production' }}/${{ inputs.name }}"

        aws ssm put-parameter --region ${AWS_REGION} --name ${PARAMETER} --type String --overwrite --value "@${{ inputs.digest }}" --description "${{ inputs.version }} / ${{ github.sha }}"

        aws cloudformation update-stack --region ${AWS_REGION} --stack-name ${STACK} --use-previous-template
        echo "Waiting for deployment to finish .. (normally ~3 minutes)"
        aws cloudformation wait stack-update-complete --region ${AWS_REGION} --stack-name ${STACK}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
